#https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages
name: 'Publish application'
env:
  PUBLISH_DIR: PTIWebAppBlazor/Client/bin/Release/net5.0/publish/wwwroot

on: push

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
        # Checkout the code
        - uses: actions/checkout@v2

        # Install .NET Core SDK
        - name: Setup .NET Core
          uses: actions/setup-dotnet@v1
          with:
            dotnet-version: 5.0.x

        # Run tests
        - name: Test
          run: dotnet test

        # Generate the website
        - name: Publish
          run: dotnet publish PTIWebAppBlazor/Client/PTIWebAppBlazor.Client.csproj -c Release

        # changes the base-tag in index.html from '/' to 'BlazorGitHubPagesDemo' to match GitHub Pages repository subdirectory
        - name: Change base-tag in index.html from / to PTIDigitalWebApp
          run: sed -i 's/<base href="\/" \/>/<base href="\/PTIDigitalWebApp\/" \/>/g' ${{ env.PUBLISH_DIR }}/index.html

        # If you're using the PWA feature in Blazor WebAssembly, you will also run into an integrity checking issue
      - name: Fix service-worker-assets.js hashes
        working-directory: ${{ env.PUBLISH_DIR }}
        run: |
          jsFile=$(<service-worker-assets.js)
          # remove JavaScript from contents so it can be interpreted as JSON
          json=$(echo "$jsFile" | sed "s/self.assetsManifest = //g" | sed "s/;//g")
          # grab the assets JSON array
          assets=$(echo "$json" | jq '.assets[]' -c)
          for asset in $assets
          do
            oldHash=$(echo "$asset" | jq '.hash')
            #remove leading and trailing quotes
            oldHash="${oldHash:1:-1}"
            path=$(echo "$asset" | jq '.url')
            #remove leading and trailing quotes
            path="${path:1:-1}"
            newHash="sha256-$(openssl dgst -sha256 -binary $path | openssl base64 -A)"
            
            if [ $oldHash != $newHash ]; then
              # escape slashes for json
              oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
              newHash=$(echo "$newHash" | sed 's;/;\\/;g')
              echo "Updating hash for $path from $oldHash to $newHash"
              # escape slashes second time for sed
              oldHash=$(echo "$oldHash" | sed 's;/;\\/;g')
              jsFile=$(echo -n "$jsFile" | sed "s;$oldHash;$newHash;g")
            fi
          done

          echo -n "$jsFile" > service-worker-assets.js  
          
        # copy index.html to 404.html to serve the same file when a file is not found
        - name: copy index.html to 404.html
          run: cp ${{ env.PUBLISH_DIR }}/index.html ${{ env.PUBLISH_DIR }}/404.html
        # add .nojekyll file to tell GitHub pages to not treat this as a Jekyll project. (Allow files and folders starting with an underscore)
        - name: Add .nojekyll file
          run: touch ${{ env.PUBLISH_DIR }}/.nojekyll    

        # Publish the website
        - name: GitHub Pages action
          if: ${{ github.ref == 'refs/heads/master' }} # Publish only when the push is on master
          uses: peaceiris/actions-gh-pages@v3.6.1
          with:
            github_token: ${{ secrets.PUBLISH_TOKEN }}
            publish_branch: gh-pages
            publish_dir: ${{ env.PUBLISH_DIR }}
            allow_empty_commit: false
            keep_files: false
            force_orphan: true
            # TODO uncomment the following line if you have a custom domain name
            # cname: demo.meziantou.net